# Dockerfile para pruebas locales de Qwen-Image-Edit
# Optimizado para desarrollo y testing
FROM nvidia/cuda:12.1.1-devel-ubuntu22.04

# Evita que la instalación pida interacción del usuario
ENV DEBIAN_FRONTEND=noninteractive

# Configurar variables de entorno para optimización
ENV PYTHONUNBUFFERED=1
ENV CUDA_VISIBLE_DEVICES=0
ENV HF_HOME=/app/cache
ENV TRANSFORMERS_CACHE=/app/cache

# Instala Python 3, pip y git
RUN apt-get update && \
    apt-get install -y python3 python3-pip git wget curl && \
    rm -rf /var/lib/apt/lists/*

# Establece el directorio de trabajo
WORKDIR /app

# Crear directorio para cache
RUN mkdir -p /app/cache

# Instala las dependencias de Python paso a paso para evitar errores
RUN pip install --no-cache-dir --upgrade pip

# Instala PyTorch con CUDA 12.1
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

# Instala dependencias específicas para Qwen-Image-Edit
RUN pip install --no-cache-dir \
    diffusers>=0.21.0 \
    transformers>=4.35.0 \
    accelerate \
    sentencepiece \
    Pillow \
    jupyter \
    matplotlib \
    numpy \
    safetensors

# Intenta instalar xformers para optimización (opcional)
RUN pip install --no-cache-dir xformers || echo "xformers installation failed, continuing without it"

# Copia todos los archivos del proyecto
COPY . /app/

# Crear script de inicio para desarrollo
RUN echo '#!/bin/bash\n\
echo "=== QWEN-IMAGE-EDIT LOCAL TESTING ==="\n\
echo "GPU disponible: $(nvidia-smi --query-gpu=name --format=csv,noheader,nounits)"\n\
echo "VRAM disponible: $(nvidia-smi --query-gpu=memory.total --format=csv,noheader,nounits) MB"\n\
echo "Iniciando Jupyter Lab..."\n\
jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token="" --NotebookApp.password=""' > /app/start_dev.sh

RUN chmod +x /app/start_dev.sh

# Exponer puerto para Jupyter
EXPOSE 8888

# Comando por defecto para desarrollo
CMD ["/app/start_dev.sh"]
